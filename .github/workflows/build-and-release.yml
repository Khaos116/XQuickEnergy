name: Check and Release Version

on:
  workflow_dispatch:  # 手动触发工作流

jobs:
  check_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 拉取所有标签和完整历史

      - name: 获取最新发布版本标签
        run: |
          RESPONSE=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          RELEASE_TAG=$(echo "${RESPONSE}" | jq -r .tag_name)
          echo "最新发布的版本标签: ${RELEASE_TAG}"

      - name: 获取 myLazyNoSo 分支的最新标签
        run: |
          git fetch --tags  # 确保获取所有标签
          TAGS=$(git for-each-ref --sort=-creatordate --format '%(refname:short)' refs/tags | grep -E '^v' | head -n 1)
          echo "myLazyNoSo 分支的最新标签: ${TAGS}"

      - name: 比较版本标签
        id: compare_versions
        run: |
          if [ "$RELEASE_TAG" == "$TAGS" ]; then
            echo "版本相同: 发布版本标签和 myLazyNoSo 分支标签相同，跳过发布操作"
            echo "skip_release=true" >> $GITHUB_ENV
          else
            echo "版本不同: 开始对 myLazyNoSo 分支进行打包和发布"
            echo "skip_release=false" >> $GITHUB_ENV

      - name: 打包并发布 myLazyNoSo 分支（如果版本不同）
        if: env.skip_release == 'false'
        run: |
          # 打包操作（假设使用 tar.gz 格式）
          git archive --format=tar.gz -o myLazyNoSo_${TAGS}.tar.gz HEAD
          # 创建发布
          gh release create ${TAGS} myLazyNoSo_${TAGS}.tar.gz --title "Release ${TAGS}" --notes "发布版本 ${TAGS} 的 myLazyNoSo 分支"
          echo "发布成功，版本 ${TAGS} 已上传到 GitHub Releases"

      - name: 打印版本相同信息
        if: env.skip_release == 'true'
        run: |
          echo "版本相同，无需发布更新"
